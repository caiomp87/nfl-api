// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NflApiServiceClient is the client API for NflApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NflApiServiceClient interface {
	CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*CreateTeamResponse, error)
	GetTeamById(ctx context.Context, in *GetTeamByIdRequest, opts ...grpc.CallOption) (*Team, error)
	GetTeams(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NflApiService_GetTeamsClient, error)
	UpdateTeam(ctx context.Context, in *UpdateTeamRequest, opts ...grpc.CallOption) (*Team, error)
}

type nflApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNflApiServiceClient(cc grpc.ClientConnInterface) NflApiServiceClient {
	return &nflApiServiceClient{cc}
}

func (c *nflApiServiceClient) CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*CreateTeamResponse, error) {
	out := new(CreateTeamResponse)
	err := c.cc.Invoke(ctx, "/nflApi.nflApiService/CreateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nflApiServiceClient) GetTeamById(ctx context.Context, in *GetTeamByIdRequest, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, "/nflApi.nflApiService/GetTeamById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nflApiServiceClient) GetTeams(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NflApiService_GetTeamsClient, error) {
	stream, err := c.cc.NewStream(ctx, &NflApiService_ServiceDesc.Streams[0], "/nflApi.nflApiService/GetTeams", opts...)
	if err != nil {
		return nil, err
	}
	x := &nflApiServiceGetTeamsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NflApiService_GetTeamsClient interface {
	Recv() (*Team, error)
	grpc.ClientStream
}

type nflApiServiceGetTeamsClient struct {
	grpc.ClientStream
}

func (x *nflApiServiceGetTeamsClient) Recv() (*Team, error) {
	m := new(Team)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nflApiServiceClient) UpdateTeam(ctx context.Context, in *UpdateTeamRequest, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, "/nflApi.nflApiService/UpdateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NflApiServiceServer is the server API for NflApiService service.
// All implementations must embed UnimplementedNflApiServiceServer
// for forward compatibility
type NflApiServiceServer interface {
	CreateTeam(context.Context, *CreateTeamRequest) (*CreateTeamResponse, error)
	GetTeamById(context.Context, *GetTeamByIdRequest) (*Team, error)
	GetTeams(*Empty, NflApiService_GetTeamsServer) error
	UpdateTeam(context.Context, *UpdateTeamRequest) (*Team, error)
	mustEmbedUnimplementedNflApiServiceServer()
}

// UnimplementedNflApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNflApiServiceServer struct {
}

func (UnimplementedNflApiServiceServer) CreateTeam(context.Context, *CreateTeamRequest) (*CreateTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (UnimplementedNflApiServiceServer) GetTeamById(context.Context, *GetTeamByIdRequest) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamById not implemented")
}
func (UnimplementedNflApiServiceServer) GetTeams(*Empty, NflApiService_GetTeamsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTeams not implemented")
}
func (UnimplementedNflApiServiceServer) UpdateTeam(context.Context, *UpdateTeamRequest) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeam not implemented")
}
func (UnimplementedNflApiServiceServer) mustEmbedUnimplementedNflApiServiceServer() {}

// UnsafeNflApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NflApiServiceServer will
// result in compilation errors.
type UnsafeNflApiServiceServer interface {
	mustEmbedUnimplementedNflApiServiceServer()
}

func RegisterNflApiServiceServer(s grpc.ServiceRegistrar, srv NflApiServiceServer) {
	s.RegisterService(&NflApiService_ServiceDesc, srv)
}

func _NflApiService_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NflApiServiceServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nflApi.nflApiService/CreateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NflApiServiceServer).CreateTeam(ctx, req.(*CreateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NflApiService_GetTeamById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NflApiServiceServer).GetTeamById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nflApi.nflApiService/GetTeamById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NflApiServiceServer).GetTeamById(ctx, req.(*GetTeamByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NflApiService_GetTeams_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NflApiServiceServer).GetTeams(m, &nflApiServiceGetTeamsServer{stream})
}

type NflApiService_GetTeamsServer interface {
	Send(*Team) error
	grpc.ServerStream
}

type nflApiServiceGetTeamsServer struct {
	grpc.ServerStream
}

func (x *nflApiServiceGetTeamsServer) Send(m *Team) error {
	return x.ServerStream.SendMsg(m)
}

func _NflApiService_UpdateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NflApiServiceServer).UpdateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nflApi.nflApiService/UpdateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NflApiServiceServer).UpdateTeam(ctx, req.(*UpdateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NflApiService_ServiceDesc is the grpc.ServiceDesc for NflApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NflApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nflApi.nflApiService",
	HandlerType: (*NflApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTeam",
			Handler:    _NflApiService_CreateTeam_Handler,
		},
		{
			MethodName: "GetTeamById",
			Handler:    _NflApiService_GetTeamById_Handler,
		},
		{
			MethodName: "UpdateTeam",
			Handler:    _NflApiService_UpdateTeam_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTeams",
			Handler:       _NflApiService_GetTeams_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "nfl-api.proto",
}
